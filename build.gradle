apply plugin: 'c'
apply plugin: 'visual-studio'

def os = org.gradle.internal.os.OperatingSystem.current()
model {
    buildTypes {
        debug
        release
    }
    components {
        ADFLib(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDir 'adflib'
                        if (os.isWindows()) {
                            srcDir 'adflib/win32'
                        } else {
                            srcDir 'adflib/generic'
                        }
                        include '*.c'
                    }
                    exportedHeaders {
                        srcDir 'adflib'
                        if (os.isWindows()) {
                            srcDir 'adflib/win32'
                        } else {
                            srcDir 'adflib/generic'
                        }
                        include '*.h'
                    }
                }
                binaries.all {
                    if (os.isWindows()) {
                        linker.args 'User32.lib'
                    }
                }
            }
        }
        for (cmpName in ['adfcreate', 'adfcopy', 'adfdelete', 'adfdump', 'adfextract', 'adfinfo', 'adfinstall', 'adflist', 'adfmakedir']) {
            def nCmpName = cmpName
            if (nCmpName == 'adfinstall') {
                // Too dumb windows .... program with install in name asks for admin privileges..
                nCmpName = 'adfinst'
            }
            "$nCmpName"(NativeExecutableSpec) {
                def currentComponentName = name;
                sources {
                    c {
                        source {
                            srcDir '.'
                            if (currentComponentName == 'adfinst') {
                                // Too dumb windows .... program with install in name asks for admin privileges..
                                include "adfinstall.c"
                            } else {
                                include "${currentComponentName}.c"
                            }
                            include 'misc.c'
                            include 'version.c'
                            include 'error.c'
                            include 'zfile.c'
                            include 'bootblocks.c'
                            if (os.isWindows()) {
                                include "win32/*.c"
                            }
                        }
                        lib library: 'ADFLib', linkage: 'static'
                    }
                }
            }
        }
    }
    binaries {
        all {
            if ((toolChain in Gcc || toolChain in Clang) && buildType == buildTypes.debug) {
                cCompiler.args "-g"
            }
            if (toolChain in VisualCpp) {
                if (buildType == buildTypes.debug) {
                    cCompiler.args '/FS'
                    cCompiler.args '/Zi'
                    cCompiler.define 'DEBUG'
                    //cCompiler.define '_MBCS'
                    linker.args '/DEBUG'
                }
            }
        }
    }
}